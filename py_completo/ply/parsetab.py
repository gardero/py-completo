
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'documentABSURD_MARK BASE BLANK_NODE_LABEL BOOLEAN CONSTRAINTS DECIMAL DOUBLE END_MARK END_STATEMENT_MARK END_TERMS_MARK EQUALITY_MARK FACTS FLOAT INTEGER IRIREF LABEL LANGTAG L_IDENT NEGATION PNAME_LN PNAME_NS PREFIX QUERIES QUESTION_MARK RULES RULE_MARK SEPARATOR START_STATEMENT_MARK START_TERMS_MARK STRING TOP TOPTOP UNA U_IDENT\n    document : header body\n        | body\n    \n    header : header_one\n        | header_one header\n    \n    header_one : BASE IRIREF\n        | PREFIX PNAME_NS IRIREF\n        | TOP L_IDENT\n        | TOP IRIREF\n        | UNA\n    \n    body : section_list\n        | statement_list\n    \n    section_list : section\n        | section section_list\n    \n    section : annotation\n        | annotation statement_list\n    \n    annotation : RULES\n        | FACTS\n        | CONSTRAINTS\n        | QUERIES\n    \n    statement_list : statement\n        | statement statement_list\n    \n    statement : statement_expr\n        | LABEL statement_expr\n\n    \n    statement_expr : constraint\n        | rule\n        | drule\n        | cquery\n        | nquery\n        | fact\n\n    \n    cquery : QUESTION_MARK START_TERMS_MARK term_list_or_empty END_TERMS_MARK RULE_MARK conjunction_atoms_or_empty END_MARK\n        | QUESTION_MARK RULE_MARK conjunction_atoms_or_empty END_MARK\n    \n    nquery : QUESTION_MARK START_TERMS_MARK term_list_or_empty END_TERMS_MARK RULE_MARK conjunction_neg END_MARK\n        | QUESTION_MARK RULE_MARK conjunction_neg END_MARK\n    \n    rule : conjunction_atoms RULE_MARK conjunction_atoms_or_empty END_MARK\n    \n    drule : START_STATEMENT_MARK conjunction_csf_list END_STATEMENT_MARK RULE_MARK conjunction_atoms_or_empty END_MARK\n    \n    conjunction_csf_list : conjunction_csf\n        | conjunction_csf SEPARATOR conjunction_csf_list\n    \n    conjunction_csf : atom\n        | START_TERMS_MARK conjunction_atoms END_TERMS_MARK\n    \n    constraint : ABSURD_MARK RULE_MARK conjunction_atoms END_MARK\n    \n    fact : conjunction_atoms END_MARK\n    \n    conjunction_neg : neg_literal\n        | neg_literal SEPARATOR conjunction_atoms\n        | atom SEPARATOR conjunction_neg\n        | neg_literal SEPARATOR conjunction_neg\n    \n    conjunction_atoms : atom\n        | atom SEPARATOR conjunction_atoms\n    \n    conjunction_atoms_or_empty : conjunction_atoms\n        | empty\n    \n    neg_literal : NEGATION std_atom\n    \n    atom : equality\n        | std_atom\n    \n    equality : term EQUALITY_MARK term\n    \n    std_atom : predicate START_TERMS_MARK term_list END_TERMS_MARK\n    \n    term_list_or_empty : term_list\n        | empty\n    \n    term_list : term\n        | term SEPARATOR term_list\n    \n    term : constant\n        | variable\n    \n    predicate : prefixed_name\n            | L_IDENT\n            | IRIREF\n    \n    constant : prefixed_name\n            | L_IDENT\n            | IRIREF\n            | literal\n    \n    variable : U_IDENT\n        | BLANK_NODE_LABEL\n    \n    prefixed_name : PNAME_LN\n                | PNAME_NS\n    \n    literal : rdf_literal\n            | numeric_literal\n            | boolean_literal\n    \n    boolean_literal : BOOLEAN\n    \n    rdf_literal : STRING TOPTOP iri\n    \n    rdf_literal : STRING LANGTAG\n    \n    rdf_literal : STRING\n    \n    numeric_literal : INTEGER\n                   | DECIMAL\n                   | DOUBLE\n                   | FLOAT\n    iri : IRIREFiri : prefixed_nameempty :'
    
_lr_action_items = {'BASE':([0,4,13,56,58,59,78,],[7,7,-9,-5,-7,-8,-6,]),'PREFIX':([0,4,13,56,58,59,78,],[9,9,-9,-5,-7,-8,-6,]),'TOP':([0,4,13,56,58,59,78,],[11,11,-9,-5,-7,-8,-6,]),'UNA':([0,4,13,56,58,59,78,],[13,13,-9,-5,-7,-8,-6,]),'LABEL':([0,2,4,13,15,16,17,19,20,21,22,23,24,25,26,27,28,55,56,58,59,63,66,78,104,105,111,112,127,131,132,],[18,18,-3,-9,18,18,-22,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,-4,-5,-7,-8,-23,-41,-6,-40,-34,-31,-33,-35,-30,-32,]),'RULES':([0,2,4,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,55,56,58,59,61,62,63,66,78,104,105,111,112,127,131,132,],[19,19,-3,-9,19,-20,-14,-22,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,-4,-5,-7,-8,-21,-15,-23,-41,-6,-40,-34,-31,-33,-35,-30,-32,]),'FACTS':([0,2,4,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,55,56,58,59,61,62,63,66,78,104,105,111,112,127,131,132,],[20,20,-3,-9,20,-20,-14,-22,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,-4,-5,-7,-8,-21,-15,-23,-41,-6,-40,-34,-31,-33,-35,-30,-32,]),'CONSTRAINTS':([0,2,4,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,55,56,58,59,61,62,63,66,78,104,105,111,112,127,131,132,],[21,21,-3,-9,21,-20,-14,-22,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,-4,-5,-7,-8,-21,-15,-23,-41,-6,-40,-34,-31,-33,-35,-30,-32,]),'QUERIES':([0,2,4,13,14,15,16,17,19,20,21,22,23,24,25,26,27,28,55,56,58,59,61,62,63,66,78,104,105,111,112,127,131,132,],[22,22,-3,-9,22,-20,-14,-22,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,-4,-5,-7,-8,-21,-15,-23,-41,-6,-40,-34,-31,-33,-35,-30,-32,]),'ABSURD_MARK':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,55,56,58,59,63,66,78,104,105,111,112,127,131,132,],[29,29,-3,-9,29,29,-22,29,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,-4,-5,-7,-8,-23,-41,-6,-40,-34,-31,-33,-35,-30,-32,]),'START_STATEMENT_MARK':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,55,56,58,59,63,66,78,104,105,111,112,127,131,132,],[31,31,-3,-9,31,31,-22,31,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,-4,-5,-7,-8,-23,-41,-6,-40,-34,-31,-33,-35,-30,-32,]),'QUESTION_MARK':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,55,56,58,59,63,66,78,104,105,111,112,127,131,132,],[32,32,-3,-9,32,32,-22,32,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,-4,-5,-7,-8,-23,-41,-6,-40,-34,-31,-33,-35,-30,-32,]),'L_IDENT':([0,2,4,11,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,58,59,63,64,65,66,70,71,72,73,74,75,78,84,97,104,105,106,110,111,112,113,114,121,127,130,131,132,],[12,12,-3,58,-9,12,12,-22,12,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,12,-4,-5,-7,-8,-23,12,12,-41,12,91,12,12,91,91,-6,12,117,-40,-34,12,91,-31,-33,12,12,12,-35,12,-30,-32,]),'IRIREF':([0,2,4,7,11,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,57,58,59,63,64,65,66,70,71,72,73,74,75,76,78,84,97,104,105,106,110,111,112,113,114,121,127,130,131,132,],[8,8,-3,56,59,-9,8,8,-22,8,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,8,-4,-5,78,-7,-8,-23,8,8,-41,8,92,8,8,92,92,102,-6,8,118,-40,-34,8,92,-31,-33,8,8,8,-35,8,-30,-32,]),'U_IDENT':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,58,59,63,64,65,66,70,71,72,73,74,75,78,84,104,105,106,110,111,112,113,114,121,127,130,131,132,],[42,42,-3,-9,42,42,-22,42,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,42,-4,-5,-7,-8,-23,42,42,-41,42,42,42,42,42,42,-6,42,-40,-34,42,42,-31,-33,42,42,42,-35,42,-30,-32,]),'BLANK_NODE_LABEL':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,58,59,63,64,65,66,70,71,72,73,74,75,78,84,104,105,106,110,111,112,113,114,121,127,130,131,132,],[43,43,-3,-9,43,43,-22,43,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,43,-4,-5,-7,-8,-23,43,43,-41,43,43,43,43,43,43,-6,43,-40,-34,43,43,-31,-33,43,43,43,-35,43,-30,-32,]),'PNAME_LN':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,58,59,63,64,65,66,70,71,72,73,74,75,76,78,84,97,104,105,106,110,111,112,113,114,121,127,130,131,132,],[44,44,-3,-9,44,44,-22,44,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,44,-4,-5,-7,-8,-23,44,44,-41,44,44,44,44,44,44,44,-6,44,44,-40,-34,44,44,-31,-33,44,44,44,-35,44,-30,-32,]),'PNAME_NS':([0,2,4,9,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,58,59,63,64,65,66,70,71,72,73,74,75,76,78,84,97,104,105,106,110,111,112,113,114,121,127,130,131,132,],[10,10,-3,57,-9,10,10,-22,10,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,10,-4,-5,-7,-8,-23,10,10,-41,10,10,10,10,10,10,10,-6,10,10,-40,-34,10,10,-31,-33,10,10,10,-35,10,-30,-32,]),'STRING':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,58,59,63,64,65,66,70,71,72,73,74,75,78,84,104,105,106,110,111,112,113,114,121,127,130,131,132,],[48,48,-3,-9,48,48,-22,48,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,48,-4,-5,-7,-8,-23,48,48,-41,48,48,48,48,48,48,-6,48,-40,-34,48,48,-31,-33,48,48,48,-35,48,-30,-32,]),'INTEGER':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,58,59,63,64,65,66,70,71,72,73,74,75,78,84,104,105,106,110,111,112,113,114,121,127,130,131,132,],[49,49,-3,-9,49,49,-22,49,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,49,-4,-5,-7,-8,-23,49,49,-41,49,49,49,49,49,49,-6,49,-40,-34,49,49,-31,-33,49,49,49,-35,49,-30,-32,]),'DECIMAL':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,58,59,63,64,65,66,70,71,72,73,74,75,78,84,104,105,106,110,111,112,113,114,121,127,130,131,132,],[50,50,-3,-9,50,50,-22,50,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,50,-4,-5,-7,-8,-23,50,50,-41,50,50,50,50,50,50,-6,50,-40,-34,50,50,-31,-33,50,50,50,-35,50,-30,-32,]),'DOUBLE':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,58,59,63,64,65,66,70,71,72,73,74,75,78,84,104,105,106,110,111,112,113,114,121,127,130,131,132,],[51,51,-3,-9,51,51,-22,51,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,51,-4,-5,-7,-8,-23,51,51,-41,51,51,51,51,51,51,-6,51,-40,-34,51,51,-31,-33,51,51,51,-35,51,-30,-32,]),'FLOAT':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,58,59,63,64,65,66,70,71,72,73,74,75,78,84,104,105,106,110,111,112,113,114,121,127,130,131,132,],[52,52,-3,-9,52,52,-22,52,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,52,-4,-5,-7,-8,-23,52,52,-41,52,52,52,52,52,52,-6,52,-40,-34,52,52,-31,-33,52,52,52,-35,52,-30,-32,]),'BOOLEAN':([0,2,4,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,55,56,58,59,63,64,65,66,70,71,72,73,74,75,78,84,104,105,106,110,111,112,113,114,121,127,130,131,132,],[53,53,-3,-9,53,53,-22,53,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,53,-4,-5,-7,-8,-23,53,53,-41,53,53,53,53,53,53,-6,53,-40,-34,53,53,-31,-33,53,53,53,-35,53,-30,-32,]),'$end':([1,3,5,6,14,15,16,17,19,20,21,22,23,24,25,26,27,28,54,60,61,62,63,66,104,105,111,112,127,131,132,],[0,-2,-10,-11,-12,-20,-14,-22,-16,-17,-18,-19,-24,-25,-26,-27,-28,-29,-1,-13,-21,-15,-23,-41,-40,-34,-31,-33,-35,-30,-32,]),'START_TERMS_MARK':([8,10,12,31,32,37,40,44,84,116,117,118,],[-63,-71,-62,70,71,75,-61,-70,70,-61,-62,-63,]),'EQUALITY_MARK':([8,10,12,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,77,101,102,103,],[-66,-71,-65,74,-59,-60,-64,-67,-68,-69,-70,-72,-73,-74,-78,-79,-80,-81,-82,-75,-77,-76,-83,-84,]),'SEPARATOR':([10,33,34,35,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,68,69,77,89,90,91,92,95,96,99,101,102,103,108,115,119,125,],[-71,73,-51,-52,-59,-60,-67,-68,-69,-70,-72,-73,-74,-78,-79,-80,-81,-82,-75,84,-38,-77,110,-64,-65,-66,113,114,-53,-76,-83,-84,-39,-50,-54,130,]),'END_TERMS_MARK':([10,33,34,35,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,71,77,85,86,87,88,89,90,91,92,98,99,100,101,102,103,119,122,],[-71,-46,-51,-52,-59,-60,-67,-68,-69,-70,-72,-73,-74,-78,-79,-80,-81,-82,-75,-85,-77,108,109,-55,-56,-57,-64,-65,-66,-47,-53,119,-76,-83,-84,-54,-58,]),'RULE_MARK':([10,29,30,32,33,34,35,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,77,83,90,91,92,98,99,101,102,103,109,119,],[-71,64,65,72,-46,-51,-52,-59,-60,-67,-68,-69,-70,-72,-73,-74,-78,-79,-80,-81,-82,-75,-77,106,-64,-65,-66,-47,-53,-76,-83,-84,121,-54,]),'END_MARK':([10,30,33,34,35,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,65,72,77,79,80,81,82,90,91,92,93,94,95,96,98,99,101,102,103,106,115,119,120,121,123,124,125,126,128,129,],[-71,66,-46,-51,-52,-59,-60,-67,-68,-69,-70,-72,-73,-74,-78,-79,-80,-81,-82,-75,-85,-85,-77,104,-48,105,-49,-64,-65,-66,111,112,-42,-46,-47,-53,-76,-83,-84,-85,-50,-54,127,-85,-43,-45,-46,-44,131,132,]),'END_STATEMENT_MARK':([10,34,35,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,67,68,69,77,90,91,92,99,101,102,103,107,108,119,],[-71,-51,-52,-59,-60,-67,-68,-69,-70,-72,-73,-74,-78,-79,-80,-81,-82,-75,83,-36,-38,-77,-64,-65,-66,-53,-76,-83,-84,-37,-39,-54,]),'TOPTOP':([48,],[76,]),'LANGTAG':([48,],[77,]),'NEGATION':([72,113,114,121,130,],[97,97,97,97,97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'document':([0,],[1,]),'header':([0,4,],[2,55,]),'body':([0,2,],[3,54,]),'header_one':([0,4,],[4,4,]),'section_list':([0,2,14,],[5,5,60,]),'statement_list':([0,2,15,16,],[6,6,61,62,]),'section':([0,2,14,],[14,14,14,]),'statement':([0,2,15,16,],[15,15,15,15,]),'annotation':([0,2,14,],[16,16,16,]),'statement_expr':([0,2,15,16,18,],[17,17,17,17,63,]),'constraint':([0,2,15,16,18,],[23,23,23,23,23,]),'rule':([0,2,15,16,18,],[24,24,24,24,24,]),'drule':([0,2,15,16,18,],[25,25,25,25,25,]),'cquery':([0,2,15,16,18,],[26,26,26,26,26,]),'nquery':([0,2,15,16,18,],[27,27,27,27,27,]),'fact':([0,2,15,16,18,],[28,28,28,28,28,]),'conjunction_atoms':([0,2,15,16,18,64,65,70,72,73,106,113,114,121,130,],[30,30,30,30,30,79,80,85,80,98,80,123,98,80,98,]),'atom':([0,2,15,16,18,31,64,65,70,72,73,84,106,113,114,121,130,],[33,33,33,33,33,69,33,33,33,96,33,69,33,125,96,96,125,]),'equality':([0,2,15,16,18,31,64,65,70,72,73,84,106,113,114,121,130,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'std_atom':([0,2,15,16,18,31,64,65,70,72,73,84,97,106,113,114,121,130,],[35,35,35,35,35,35,35,35,35,35,35,35,115,35,35,35,35,35,]),'term':([0,2,15,16,18,31,64,65,70,71,72,73,74,75,84,106,110,113,114,121,130,],[36,36,36,36,36,36,36,36,36,89,36,36,99,89,36,36,89,36,36,36,36,]),'predicate':([0,2,15,16,18,31,64,65,70,72,73,84,97,106,113,114,121,130,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'constant':([0,2,15,16,18,31,64,65,70,71,72,73,74,75,84,106,110,113,114,121,130,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'variable':([0,2,15,16,18,31,64,65,70,71,72,73,74,75,84,106,110,113,114,121,130,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'prefixed_name':([0,2,15,16,18,31,64,65,70,71,72,73,74,75,76,84,97,106,110,113,114,121,130,],[40,40,40,40,40,40,40,40,40,90,40,40,90,90,103,40,116,40,90,40,40,40,40,]),'literal':([0,2,15,16,18,31,64,65,70,71,72,73,74,75,84,106,110,113,114,121,130,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'rdf_literal':([0,2,15,16,18,31,64,65,70,71,72,73,74,75,84,106,110,113,114,121,130,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'numeric_literal':([0,2,15,16,18,31,64,65,70,71,72,73,74,75,84,106,110,113,114,121,130,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'boolean_literal':([0,2,15,16,18,31,64,65,70,71,72,73,74,75,84,106,110,113,114,121,130,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'conjunction_csf_list':([31,84,],[67,107,]),'conjunction_csf':([31,84,],[68,68,]),'conjunction_atoms_or_empty':([65,72,106,121,],[81,93,120,128,]),'empty':([65,71,72,106,121,],[82,88,82,82,82,]),'term_list_or_empty':([71,],[86,]),'term_list':([71,75,110,],[87,100,122,]),'conjunction_neg':([72,113,114,121,130,],[94,124,126,129,126,]),'neg_literal':([72,113,114,121,130,],[95,95,95,95,95,]),'iri':([76,],[101,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> document","S'",1,None,None,None),
  ('document -> header body','document',2,'p_document','dlgpp_parser.py',19),
  ('document -> body','document',1,'p_document','dlgpp_parser.py',20),
  ('header -> header_one','header',1,'p_header','dlgpp_parser.py',30),
  ('header -> header_one header','header',2,'p_header','dlgpp_parser.py',31),
  ('header_one -> BASE IRIREF','header_one',2,'p_header_one','dlgpp_parser.py',41),
  ('header_one -> PREFIX PNAME_NS IRIREF','header_one',3,'p_header_one','dlgpp_parser.py',42),
  ('header_one -> TOP L_IDENT','header_one',2,'p_header_one','dlgpp_parser.py',43),
  ('header_one -> TOP IRIREF','header_one',2,'p_header_one','dlgpp_parser.py',44),
  ('header_one -> UNA','header_one',1,'p_header_one','dlgpp_parser.py',45),
  ('body -> section_list','body',1,'p_body','dlgpp_parser.py',57),
  ('body -> statement_list','body',1,'p_body','dlgpp_parser.py',58),
  ('section_list -> section','section_list',1,'p_section_list','dlgpp_parser.py',64),
  ('section_list -> section section_list','section_list',2,'p_section_list','dlgpp_parser.py',65),
  ('section -> annotation','section',1,'p_section','dlgpp_parser.py',75),
  ('section -> annotation statement_list','section',2,'p_section','dlgpp_parser.py',76),
  ('annotation -> RULES','annotation',1,'p_annotation','dlgpp_parser.py',86),
  ('annotation -> FACTS','annotation',1,'p_annotation','dlgpp_parser.py',87),
  ('annotation -> CONSTRAINTS','annotation',1,'p_annotation','dlgpp_parser.py',88),
  ('annotation -> QUERIES','annotation',1,'p_annotation','dlgpp_parser.py',89),
  ('statement_list -> statement','statement_list',1,'p_statement_list','dlgpp_parser.py',96),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','dlgpp_parser.py',97),
  ('statement -> statement_expr','statement',1,'p_statement','dlgpp_parser.py',106),
  ('statement -> LABEL statement_expr','statement',2,'p_statement','dlgpp_parser.py',107),
  ('statement_expr -> constraint','statement_expr',1,'p_statement_expr','dlgpp_parser.py',118),
  ('statement_expr -> rule','statement_expr',1,'p_statement_expr','dlgpp_parser.py',119),
  ('statement_expr -> drule','statement_expr',1,'p_statement_expr','dlgpp_parser.py',120),
  ('statement_expr -> cquery','statement_expr',1,'p_statement_expr','dlgpp_parser.py',121),
  ('statement_expr -> nquery','statement_expr',1,'p_statement_expr','dlgpp_parser.py',122),
  ('statement_expr -> fact','statement_expr',1,'p_statement_expr','dlgpp_parser.py',123),
  ('cquery -> QUESTION_MARK START_TERMS_MARK term_list_or_empty END_TERMS_MARK RULE_MARK conjunction_atoms_or_empty END_MARK','cquery',7,'p_cquery','dlgpp_parser.py',131),
  ('cquery -> QUESTION_MARK RULE_MARK conjunction_atoms_or_empty END_MARK','cquery',4,'p_cquery','dlgpp_parser.py',132),
  ('nquery -> QUESTION_MARK START_TERMS_MARK term_list_or_empty END_TERMS_MARK RULE_MARK conjunction_neg END_MARK','nquery',7,'p_nquery','dlgpp_parser.py',144),
  ('nquery -> QUESTION_MARK RULE_MARK conjunction_neg END_MARK','nquery',4,'p_nquery','dlgpp_parser.py',145),
  ('rule -> conjunction_atoms RULE_MARK conjunction_atoms_or_empty END_MARK','rule',4,'p_rule','dlgpp_parser.py',158),
  ('drule -> START_STATEMENT_MARK conjunction_csf_list END_STATEMENT_MARK RULE_MARK conjunction_atoms_or_empty END_MARK','drule',6,'p_drule','dlgpp_parser.py',168),
  ('conjunction_csf_list -> conjunction_csf','conjunction_csf_list',1,'p_conjunction_csf_list','dlgpp_parser.py',179),
  ('conjunction_csf_list -> conjunction_csf SEPARATOR conjunction_csf_list','conjunction_csf_list',3,'p_conjunction_csf_list','dlgpp_parser.py',180),
  ('conjunction_csf -> atom','conjunction_csf',1,'p_conjunction_csf','dlgpp_parser.py',189),
  ('conjunction_csf -> START_TERMS_MARK conjunction_atoms END_TERMS_MARK','conjunction_csf',3,'p_conjunction_csf','dlgpp_parser.py',190),
  ('constraint -> ABSURD_MARK RULE_MARK conjunction_atoms END_MARK','constraint',4,'p_constraint','dlgpp_parser.py',199),
  ('fact -> conjunction_atoms END_MARK','fact',2,'p_fact','dlgpp_parser.py',205),
  ('conjunction_neg -> neg_literal','conjunction_neg',1,'p_conjunction_neg','dlgpp_parser.py',211),
  ('conjunction_neg -> neg_literal SEPARATOR conjunction_atoms','conjunction_neg',3,'p_conjunction_neg','dlgpp_parser.py',212),
  ('conjunction_neg -> atom SEPARATOR conjunction_neg','conjunction_neg',3,'p_conjunction_neg','dlgpp_parser.py',213),
  ('conjunction_neg -> neg_literal SEPARATOR conjunction_neg','conjunction_neg',3,'p_conjunction_neg','dlgpp_parser.py',214),
  ('conjunction_atoms -> atom','conjunction_atoms',1,'p_conjunction_atoms','dlgpp_parser.py',224),
  ('conjunction_atoms -> atom SEPARATOR conjunction_atoms','conjunction_atoms',3,'p_conjunction_atoms','dlgpp_parser.py',225),
  ('conjunction_atoms_or_empty -> conjunction_atoms','conjunction_atoms_or_empty',1,'p_conjunction_atoms_or_empty','dlgpp_parser.py',234),
  ('conjunction_atoms_or_empty -> empty','conjunction_atoms_or_empty',1,'p_conjunction_atoms_or_empty','dlgpp_parser.py',235),
  ('neg_literal -> NEGATION std_atom','neg_literal',2,'p_neg_literal','dlgpp_parser.py',245),
  ('atom -> equality','atom',1,'p_atom','dlgpp_parser.py',253),
  ('atom -> std_atom','atom',1,'p_atom','dlgpp_parser.py',254),
  ('equality -> term EQUALITY_MARK term','equality',3,'p_equality','dlgpp_parser.py',260),
  ('std_atom -> predicate START_TERMS_MARK term_list END_TERMS_MARK','std_atom',4,'p_std_atom','dlgpp_parser.py',269),
  ('term_list_or_empty -> term_list','term_list_or_empty',1,'p_term_list_or_empty','dlgpp_parser.py',278),
  ('term_list_or_empty -> empty','term_list_or_empty',1,'p_term_list_or_empty','dlgpp_parser.py',279),
  ('term_list -> term','term_list',1,'p_term_list','dlgpp_parser.py',285),
  ('term_list -> term SEPARATOR term_list','term_list',3,'p_term_list','dlgpp_parser.py',286),
  ('term -> constant','term',1,'p_term','dlgpp_parser.py',296),
  ('term -> variable','term',1,'p_term','dlgpp_parser.py',297),
  ('predicate -> prefixed_name','predicate',1,'p_predicate','dlgpp_parser.py',303),
  ('predicate -> L_IDENT','predicate',1,'p_predicate','dlgpp_parser.py',304),
  ('predicate -> IRIREF','predicate',1,'p_predicate','dlgpp_parser.py',305),
  ('constant -> prefixed_name','constant',1,'p_constant','dlgpp_parser.py',311),
  ('constant -> L_IDENT','constant',1,'p_constant','dlgpp_parser.py',312),
  ('constant -> IRIREF','constant',1,'p_constant','dlgpp_parser.py',313),
  ('constant -> literal','constant',1,'p_constant','dlgpp_parser.py',314),
  ('variable -> U_IDENT','variable',1,'p_variable','dlgpp_parser.py',321),
  ('variable -> BLANK_NODE_LABEL','variable',1,'p_variable','dlgpp_parser.py',322),
  ('prefixed_name -> PNAME_LN','prefixed_name',1,'p_prefixed_name','dlgpp_parser.py',331),
  ('prefixed_name -> PNAME_NS','prefixed_name',1,'p_prefixed_name','dlgpp_parser.py',332),
  ('literal -> rdf_literal','literal',1,'p_literal','dlgpp_parser.py',339),
  ('literal -> numeric_literal','literal',1,'p_literal','dlgpp_parser.py',340),
  ('literal -> boolean_literal','literal',1,'p_literal','dlgpp_parser.py',341),
  ('boolean_literal -> BOOLEAN','boolean_literal',1,'p_boolean_literal','dlgpp_parser.py',347),
  ('rdf_literal -> STRING TOPTOP iri','rdf_literal',3,'p_rdf_literal','dlgpp_parser.py',353),
  ('rdf_literal -> STRING LANGTAG','rdf_literal',2,'p_rdf_literal2','dlgpp_parser.py',359),
  ('rdf_literal -> STRING','rdf_literal',1,'p_rdf_literal3','dlgpp_parser.py',366),
  ('numeric_literal -> INTEGER','numeric_literal',1,'p_numeric_literal','dlgpp_parser.py',372),
  ('numeric_literal -> DECIMAL','numeric_literal',1,'p_numeric_literal','dlgpp_parser.py',373),
  ('numeric_literal -> DOUBLE','numeric_literal',1,'p_numeric_literal','dlgpp_parser.py',374),
  ('numeric_literal -> FLOAT','numeric_literal',1,'p_numeric_literal','dlgpp_parser.py',375),
  ('iri -> IRIREF','iri',1,'p_iri','dlgpp_parser.py',382),
  ('iri -> prefixed_name','iri',1,'p_iri2','dlgpp_parser.py',386),
  ('empty -> <empty>','empty',0,'p_empty','dlgpp_parser.py',391),
]
